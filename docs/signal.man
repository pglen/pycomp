SIGNAL(7)                  Linux Programmer's Manual                 SIGNAL(7)

NNAAMMEE
       signal - overview of signals

DDEESSCCRRIIPPTTIIOONN
       Linux  supports both POSIX reliable signals (hereinafter "standard sig‐
       nals") and POSIX real-time signals.

   SSiiggnnaall ddiissppoossiittiioonnss
       Each signal has a current _d_i_s_p_o_s_i_t_i_o_n, which determines how the process
       behaves when it is delivered the signal.

       The  entries  in the "Action" column of the table below specify the de‐
       fault disposition for each signal, as follows:

       Term   Default action is to terminate the process.

       Ign    Default action is to ignore the signal.

       Core   Default action is to terminate the process and  dump  core  (see
              ccoorree(5)).

       Stop   Default action is to stop the process.

       Cont   Default  action  is  to  continue the process if it is currently
              stopped.

       A process can change the disposition of a signal using ssiiggaaccttiioonn(2)  or
       ssiiggnnaall(2).   (The  latter  is  less portable when establishing a signal
       handler; see ssiiggnnaall(2) for  details.)   Using  these  system  calls,  a
       process  can  elect one of the following behaviors to occur on delivery
       of the signal: perform the default action; ignore the signal; or  catch
       the signal with a _s_i_g_n_a_l _h_a_n_d_l_e_r, a programmer-defined function that is
       automatically invoked when the signal is delivered.

       By default, a signal handler is invoked on the  normal  process  stack.
       It  is  possible  to  arrange that the signal handler uses an alternate
       stack; see ssiiggaallttssttaacckk(2) for a discussion of how to do this  and  when
       it might be useful.

       The  signal  disposition is a per-process attribute: in a multithreaded
       application, the disposition of a particular signal is the same for all
       threads.

       A child created via ffoorrkk(2) inherits a copy of its parent's signal dis‐
       positions.  During an eexxeeccvvee(2), the dispositions  of  handled  signals
       are  reset to the default; the dispositions of ignored signals are left
       unchanged.

   SSeennddiinngg aa ssiiggnnaall
       The following system calls and library functions allow  the  caller  to
       send a signal:

       rraaiissee(3)
              Sends a signal to the calling thread.

       kkiillll(2)
              Sends a signal to a specified process, to all members of a spec‐
              ified process group, or to all processes on the system.

       ppiiddffdd__sseenndd__ssiiggnnaall(2)
              Sends a signal to a process identified by a PID file descriptor.

       kkiillllppgg(3)
              Sends a signal to all of the  members  of  a  specified  process
              group.

       pptthhrreeaadd__kkiillll(3)
              Sends  a  signal to a specified POSIX thread in the same process
              as the caller.

       ttggkkiillll(2)
              Sends a signal to a specified thread within a specific  process.
              (This is the system call used to implement pptthhrreeaadd__kkiillll(3).)

       ssiiggqquueeuuee(3)
              Sends  a  real-time signal with accompanying data to a specified
              process.

   WWaaiittiinngg ffoorr aa ssiiggnnaall ttoo bbee ccaauugghhtt
       The following system calls suspend execution of the calling thread  un‐
       til a signal is caught (or an unhandled signal terminates the process):

       ppaauussee(2)
              Suspends execution until any signal is caught.

       ssiiggssuussppeenndd(2)
              Temporarily changes the signal mask (see below) and suspends ex‐
              ecution until one of the unmasked signals is caught.

   SSyynncchhrroonnoouussllyy aacccceeppttiinngg aa ssiiggnnaall
       Rather than asynchronously catching a signal via a signal  handler,  it
       is  possible to synchronously accept the signal, that is, to block exe‐
       cution until the signal is delivered, at which point the kernel returns
       information about the signal to the caller.  There are two general ways
       to do this:

       * ssiiggwwaaiittiinnffoo(2), ssiiggttiimmeeddwwaaiitt(2), and ssiiggwwaaiitt(3) suspend execution un‐
         til  one  of  the  signals  in a specified set is delivered.  Each of
         these calls returns information about the delivered signal.

       * ssiiggnnaallffdd(2) returns a file descriptor that can be used to read infor‐
         mation  about signals that are delivered to the caller.  Each rreeaadd(2)
         from this file descriptor blocks until one of the signals in the  set
         specified  in  the  ssiiggnnaallffdd(2) call is delivered to the caller.  The
         buffer returned by rreeaadd(2) contains a structure describing  the  sig‐
         nal.

   SSiiggnnaall mmaasskk aanndd ppeennddiinngg ssiiggnnaallss
       A  signal may be _b_l_o_c_k_e_d, which means that it will not be delivered un‐
       til it is later unblocked.  Between the time when it is  generated  and
       when it is delivered a signal is said to be _p_e_n_d_i_n_g.

       Each  thread  in  a process has an independent _s_i_g_n_a_l _m_a_s_k, which indi‐
       cates the set of signals that the  thread  is  currently  blocking.   A
       thread  can  manipulate its signal mask using pptthhrreeaadd__ssiiggmmaasskk(3).  In a
       traditional single-threaded application, ssiiggpprrooccmmaasskk(2) can be used  to
       manipulate the signal mask.

       A  child  created  via  ffoorrkk(2)  inherits a copy of its parent's signal
       mask; the signal mask is preserved across eexxeeccvvee(2).

       A signal may be process-directed  or  thread-directed.   A  process-di‐
       rected  signal  is  one  that is targeted at (and thus pending for) the
       process as a whole.  A signal may be process-directed  because  it  was
       generated by the kernel for reasons other than a hardware exception, or
       because it was sent using kkiillll(2) or  ssiiggqquueeuuee(3).   A  thread-directed
       signal  is  one that is targeted at a specific thread.  A signal may be
       thread-directed because it was generated as a consequence of  executing
       a  specific  machine-language instruction that triggered a hardware ex‐
       ception (e.g., SSIIGGSSEEGGVV for an invalid memory access, or  SSIIGGFFPPEE  for  a
       math  error), or because it was targeted at a specific thread using in‐
       terfaces such as ttggkkiillll(2) or pptthhrreeaadd__kkiillll(3).

       A process-directed signal may be delivered to any one  of  the  threads
       that  does  not currently have the signal blocked.  If more than one of
       the threads has the signal unblocked, then the kernel chooses an  arbi‐
       trary thread to which to deliver the signal.

       A  thread  can  obtain the set of signals that it currently has pending
       using ssiiggppeennddiinngg(2).  This set will consist of the union of the set  of
       pending process-directed signals and the set of signals pending for the
       calling thread.

       A child created via ffoorrkk(2) initially has an empty pending signal  set;
       the pending signal set is preserved across an eexxeeccvvee(2).

   EExxeeccuuttiioonn ooff ssiiggnnaall hhaannddlleerrss
       Whenever  there is a transition from kernel-mode to user-mode execution
       (e.g., on return from a system call or scheduling of a thread onto  the
       CPU), the kernel checks whether there is a pending unblocked signal for
       which the process has established a signal handler.  If there is such a
       pending signal, the following steps occur:

       1. The kernel performs the necessary preparatory steps for execution of
          the signal handler:

          a) The signal is removed from the set of pending signals.

          b) If the signal handler was installed by  a  call  to  ssiiggaaccttiioonn(2)
             that  specified the SSAA__OONNSSTTAACCKK flag and the thread has defined an
             alternate signal stack (using ssiiggaallttssttaacckk(2)), then that stack is
             installed.

          c) Various pieces of signal-related context are saved into a special
             frame that is created on the stack.  The  saved  information  in‐
             cludes:

             + the program counter register (i.e., the address of the next in‐
               struction in the main program that should be executed when  the
               signal handler returns);

             + architecture-specific  register state required for resuming the
               interrupted program;

             + the thread's current signal mask;

             + the thread's alternate signal stack settings.

             (If the signal  handler  was  installed  using  the  ssiiggaaccttiioonn(2)
             SSAA__SSIIGGIINNFFOO flag, then the above information is accessible via the
             _u_c_o_n_t_e_x_t___t object that is pointed to by the third argument of the
             signal handler.)

          d) Any  signals  specified in _a_c_t_-_>_s_a___m_a_s_k when registering the han‐
             dler with ssiiggpprrooccmmaasskk(2) are added to the thread's  signal  mask.
             The  signal being delivered is also added to the signal mask, un‐
             less SSAA__NNOODDEEFFEERR  was  specified  when  registering  the  handler.
             These signals are thus blocked while the handler executes.

       2. The  kernel  constructs a frame for the signal handler on the stack.
          The kernel sets the program counter for the thread to point  to  the
          first instruction of the signal handler function, and configures the
          return address for that function to point to a piece  of  user-space
          code known as the signal trampoline (described in ssiiggrreettuurrnn(2)).

       3. The  kernel  passes control back to user-space, where execution com‐
          mences at the start of the signal handler function.

       4. When the signal handler returns, control passes to the signal  tram‐
          poline code.

       5. The  signal  trampoline  calls ssiiggrreettuurrnn(2), a system call that uses
          the information in the stack frame created in step 1 to restore  the
          thread  to  its  state  before  the  signal handler was called.  The
          thread's signal mask and alternate signal  stack  settings  are  re‐
          stored  as  part  of this procedure.  Upon completion of the call to
          ssiiggrreettuurrnn(2), the kernel transfers control back to user  space,  and
          the  thread  recommences  execution at the point where it was inter‐
          rupted by the signal handler.

       Note that if the signal handler  does  not  return  (e.g.,  control  is
       transferred out of the handler using ssiigglloonnggjjmmpp(3), or the handler exe‐
       cutes a new program with eexxeeccvvee(2)), then the final step  is  not  per‐
       formed.   In  particular,  in such scenarios it is the programmer's re‐
       sponsibility to restore the state of the signal  mask  (using  ssiiggpprroocc‐‐
       mmaasskk(2)),  if it is desired to unblock the signals that were blocked on
       entry to the signal handler.  (Note that ssiigglloonnggjjmmpp(3) may or  may  not
       restore the signal mask, depending on the _s_a_v_e_s_i_g_s value that was spec‐
       ified in the corresponding call to ssiiggsseettjjmmpp(3).)

       From the kernel's point of view, execution of the signal  handler  code
       is  exactly  the  same  as  the execution of any other user-space code.
       That is to say, the kernel does not record any special  state  informa‐
       tion  indicating  that the thread is currently excuting inside a signal
       handler.  All necessary state information is maintained  in  user-space
       registers  and  the user-space stack.  The depth to which nested signal
       handlers may be invoked is thus limited only by  the  user-space  stack
       (and sensible software design!).

   SSttaannddaarrdd ssiiggnnaallss
       Linux supports the standard signals listed below.  The second column of
       the table indicates which  standard  (if  any)  specified  the  signal:
       "P1990"  indicates  that  the  signal  is  described  in  the  original
       POSIX.1-1990 standard; "P2001" indicates that the signal was  added  in
       SUSv2 and POSIX.1-2001.

       Signal      Standard   Action   Comment
       ────────────────────────────────────────────────────────────────────────
       SSIIGGAABBRRTT      P1990      Core    Abort signal from aabboorrtt(3)
       SSIIGGAALLRRMM      P1990      Term    Timer signal from aallaarrmm(2)
       SSIIGGBBUUSS       P2001      Core    Bus error (bad memory access)
       SSIIGGCCHHLLDD      P1990      Ign     Child stopped or terminated
       SSIIGGCCLLDD         -        Ign     A synonym for SSIIGGCCHHLLDD
       SSIIGGCCOONNTT      P1990      Cont    Continue if stopped
       SSIIGGEEMMTT         -        Term    Emulator trap
       SSIIGGFFPPEE       P1990      Core    Floating-point exception
       SSIIGGHHUUPP       P1990      Term    Hangup detected on controlling terminal
                                       or death of controlling process
       SSIIGGIILLLL       P1990      Core    Illegal Instruction
       SSIIGGIINNFFOO        -                A synonym for SSIIGGPPWWRR
       SSIIGGIINNTT       P1990      Term    Interrupt from keyboard
       SSIIGGIIOO          -        Term    I/O now possible (4.2BSD)
       SSIIGGIIOOTT         -        Core    IOT trap. A synonym for SSIIGGAABBRRTT
       SSIIGGKKIILLLL      P1990      Term    Kill signal
       SSIIGGLLOOSSTT        -        Term    File lock lost (unused)
       SSIIGGPPIIPPEE      P1990      Term    Broken pipe: write to pipe with no
                                       readers; see ppiippee(7)
       SSIIGGPPOOLLLL      P2001      Term    Pollable event (Sys V);
                                       synonym for SSIIGGIIOO

       SSIIGGPPRROOFF      P2001      Term    Profiling timer expired
       SSIIGGPPWWRR         -        Term    Power failure (System V)
       SSIIGGQQUUIITT      P1990      Core    Quit from keyboard
       SSIIGGSSEEGGVV      P1990      Core    Invalid memory reference
       SSIIGGSSTTKKFFLLTT      -        Term    Stack fault on coprocessor (unused)
       SSIIGGSSTTOOPP      P1990      Stop    Stop process
       SSIIGGTTSSTTPP      P1990      Stop    Stop typed at terminal
       SSIIGGSSYYSS       P2001      Core    Bad system call (SVr4);
                                       see also sseeccccoommpp(2)
       SSIIGGTTEERRMM      P1990      Term    Termination signal
       SSIIGGTTRRAAPP      P2001      Core    Trace/breakpoint trap
       SSIIGGTTTTIINN      P1990      Stop    Terminal input for background process
       SSIIGGTTTTOOUU      P1990      Stop    Terminal output for background process
       SSIIGGUUNNUUSSEEDD      -        Core    Synonymous with SSIIGGSSYYSS
       SSIIGGUURRGG       P2001      Ign     Urgent condition on socket (4.2BSD)
       SSIIGGUUSSRR11      P1990      Term    User-defined signal 1
       SSIIGGUUSSRR22      P1990      Term    User-defined signal 2
       SSIIGGVVTTAALLRRMM    P2001      Term    Virtual alarm clock (4.2BSD)
       SSIIGGXXCCPPUU      P2001      Core    CPU time limit exceeded (4.2BSD);
                                       see sseettrrlliimmiitt(2)
       SSIIGGXXFFSSZZ      P2001      Core    File size limit exceeded (4.2BSD);
                                       see sseettrrlliimmiitt(2)
       SSIIGGWWIINNCCHH       -        Ign     Window resize signal (4.3BSD, Sun)

       The signals SSIIGGKKIILLLL and SSIIGGSSTTOOPP cannot be caught, blocked, or ignored.

       Up  to  and including Linux 2.2, the default behavior for SSIIGGSSYYSS, SSIIGGXX‐‐
       CCPPUU, SSIIGGXXFFSSZZ, and (on architectures other than SPARC and  MIPS)  SSIIGGBBUUSS
       was  to  terminate  the  process (without a core dump).  (On some other
       UNIX systems the default action for SSIIGGXXCCPPUU and SSIIGGXXFFSSZZ is to terminate
       the   process  without  a  core  dump.)   Linux  2.4  conforms  to  the
       POSIX.1-2001 requirements for these signals,  terminating  the  process
       with a core dump.

       SSIIGGEEMMTT  is  not  specified in POSIX.1-2001, but nevertheless appears on
       most other UNIX systems, where its default action is typically to  ter‐
       minate the process with a core dump.

       SSIIGGPPWWRR (which is not specified in POSIX.1-2001) is typically ignored by
       default on those other UNIX systems where it appears.

       SSIIGGIIOO (which is not specified in POSIX.1-2001) is ignored by default on
       several other UNIX systems.

   QQuueeuueeiinngg aanndd ddeelliivveerryy sseemmaannttiiccss ffoorr ssttaannddaarrdd ssiiggnnaallss
       If  multiple  standard  signals are pending for a process, the order in
       which the signals are delivered is unspecified.

       Standard signals do not queue.  If multiple  instances  of  a  standard
       signal  are  generated  while that signal is blocked, then only one in‐
       stance of the signal is marked as pending (and the signal will  be  de‐
       livered  just once when it is unblocked).  In the case where a standard
       signal is already pending, the _s_i_g_i_n_f_o___t structure  (see  ssiiggaaccttiioonn(2))
       associated with that signal is not overwritten on arrival of subsequent
       instances of the same signal.  Thus, the process will receive  the  in‐
       formation associated with the first instance of the signal.

   SSiiggnnaall nnuummbbeerriinngg ffoorr ssttaannddaarrdd ssiiggnnaallss
       The  numeric  value  for  each  signal is given in the table below.  As
       shown in the table, many signals have different numeric values on  dif‐
       ferent  architectures.  The first numeric value in each table row shows
       the signal number on x86, ARM, and most other architectures; the second
       value  is  for  Alpha and SPARC; the third is for MIPS; and the last is
       for PARISC.  A dash (-) denotes that a signal is absent on  the  corre‐
       sponding architecture.

       Signal        x86/ARM     Alpha/   MIPS   PARISC   Notes
                   most others   SPARC
       ─────────────────────────────────────────────────────────────────
       SSIIGGHHUUPP           1           1       1       1
       SSIIGGIINNTT           2           2       2       2
       SSIIGGQQUUIITT          3           3       3       3
       SSIIGGIILLLL           4           4       4       4
       SSIIGGTTRRAAPP          5           5       5       5
       SSIIGGAABBRRTT          6           6       6       6
       SSIIGGIIOOTT           6           6       6       6
       SSIIGGBBUUSS           7          10      10      10
       SSIIGGEEMMTT           -           7       7      -
       SSIIGGFFPPEE           8           8       8       8
       SSIIGGKKIILLLL          9           9       9       9
       SSIIGGUUSSRR11         10          30      16      16
       SSIIGGSSEEGGVV         11          11      11      11
       SSIIGGUUSSRR22         12          31      17      17
       SSIIGGPPIIPPEE         13          13      13      13
       SSIIGGAALLRRMM         14          14      14      14
       SSIIGGTTEERRMM         15          15      15      15
       SSIIGGSSTTKKFFLLTT       16          -       -        7
       SSIIGGCCHHLLDD         17          20      18      18
       SSIIGGCCLLDD           -          -       18      -
       SSIIGGCCOONNTT         18          19      25      26
       SSIIGGSSTTOOPP         19          17      23      24
       SSIIGGTTSSTTPP         20          18      24      25
       SSIIGGTTTTIINN         21          21      26      27
       SSIIGGTTTTOOUU         22          22      27      28
       SSIIGGUURRGG          23          16      21      29
       SSIIGGXXCCPPUU         24          24      30      12
       SSIIGGXXFFSSZZ         25          25      31      30
       SSIIGGVVTTAALLRRMM       26          26      28      20
       SSIIGGPPRROOFF         27          27      29      21
       SSIIGGWWIINNCCHH        28          28      20      23
       SSIIGGIIOO           29          23      22      22
       SSIIGGPPOOLLLL                                            Same as SIGIO
       SSIIGGPPWWRR          30         29/-     19      19
       SSIIGGIINNFFOO          -         29/-     -       -
       SSIIGGLLOOSSTT          -         -/29     -       -
       SSIIGGSSYYSS          31          12      12      31
       SSIIGGUUNNUUSSEEDD       31          -       -       31

       Note the following:

       *  Where  defined,  SSIIGGUUNNUUSSEEDD  is  synonymous with SSIIGGSSYYSS.  Since glibc
          2.26, SSIIGGUUNNUUSSEEDD is no longer defined on any architecture.

       *  Signal 29 is SSIIGGIINNFFOO/SSIIGGPPWWRR (synonyms for the same value)  on  Alpha
          but SSIIGGLLOOSSTT on SPARC.

   RReeaall--ttiimmee ssiiggnnaallss
       Starting  with  version 2.2, Linux supports real-time signals as origi‐
       nally defined in the POSIX.1b real-time extensions (and now included in
       POSIX.1-2001).   The range of supported real-time signals is defined by
       the macros SSIIGGRRTTMMIINN and SSIIGGRRTTMMAAXX.  POSIX.1-2001 requires that an imple‐
       mentation support at least __PPOOSSIIXX__RRTTSSIIGG__MMAAXX (8) real-time signals.

       The  Linux  kernel  supports a range of 33 different real-time signals,
       numbered 32 to 64.  However, the glibc POSIX threads implementation in‐
       ternally uses two (for NPTL) or three (for LinuxThreads) real-time sig‐
       nals (see pptthhrreeaaddss(7)), and adjusts the value of SSIIGGRRTTMMIINN suitably  (to
       34 or 35).  Because the range of available real-time signals varies ac‐
       cording to the glibc threading implementation (and this  variation  can
       occur at run time according to the available kernel and glibc), and in‐
       deed the range of real-time signals varies across  UNIX  systems,  pro‐
       grams should _n_e_v_e_r _r_e_f_e_r _t_o _r_e_a_l_-_t_i_m_e _s_i_g_n_a_l_s _u_s_i_n_g _h_a_r_d_-_c_o_d_e_d _n_u_m_b_e_r_s,
       but instead should always refer to real-time signals using the notation
       SSIIGGRRTTMMIINN+n, and include suitable (run-time) checks that SSIIGGRRTTMMIINN+n does
       not exceed SSIIGGRRTTMMAAXX.

       Unlike standard signals, real-time signals have no predefined meanings:
       the entire set of real-time signals can be used for application-defined
       purposes.

       The default action for an unhandled real-time signal  is  to  terminate
       the receiving process.

       Real-time signals are distinguished by the following:

       1.  Multiple  instances  of  real-time  signals can be queued.  By con‐
           trast, if multiple instances of a  standard  signal  are  delivered
           while  that  signal is currently blocked, then only one instance is
           queued.

       2.  If the signal is sent using ssiiggqquueeuuee(3), an accompanying value (ei‐
           ther  an integer or a pointer) can be sent with the signal.  If the
           receiving process establishes a handler for this signal  using  the
           SSAA__SSIIGGIINNFFOO  flag  to ssiiggaaccttiioonn(2), then it can obtain this data via
           the _s_i___v_a_l_u_e field of the _s_i_g_i_n_f_o___t structure passed as the  second
           argument to the handler.  Furthermore, the _s_i___p_i_d and _s_i___u_i_d fields
           of this structure can be used to obtain the PID and real user ID of
           the process sending the signal.

       3.  Real-time  signals  are  delivered in a guaranteed order.  Multiple
           real-time signals of the same type are delivered in the order  they
           were  sent.   If different real-time signals are sent to a process,
           they  are  delivered  starting  with  the  lowest-numbered  signal.
           (I.e.,  low-numbered  signals have highest priority.)  By contrast,
           if multiple standard signals are pending for a process,  the  order
           in which they are delivered is unspecified.

       If both standard and real-time signals are pending for a process, POSIX
       leaves it unspecified which is delivered first.  Linux, like many other
       implementations, gives priority to standard signals in this case.

       According   to   POSIX,   an  implementation  should  permit  at  least
       __PPOOSSIIXX__SSIIGGQQUUEEUUEE__MMAAXX (32) real-time signals to be queued to  a  process.
       However, Linux does things differently.  In kernels up to and including
       2.6.7, Linux imposes a system-wide limit on the number of queued  real-
       time  signals  for  all  processes.  This limit can be viewed and (with
       privilege) changed via the _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_m_a_x file.  A  related
       file, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_r_t_s_i_g_-_n_r, can be used to find out how many real-
       time signals are currently queued.  In Linux 2.6.8, these _/_p_r_o_c  inter‐
       faces  were  replaced  by  the  RRLLIIMMIITT__SSIIGGPPEENNDDIINNGG resource limit, which
       specifies a per-user limit for queued  signals;  see  sseettrrlliimmiitt(2)  for
       further details.

       The  addition  of real-time signals required the widening of the signal
       set structure (_s_i_g_s_e_t___t) from 32 to  64  bits.   Consequently,  various
       system  calls  were  superseded  by new system calls that supported the
       larger signal sets.  The old and new system calls are as follows:

       LLiinnuuxx 22..00 aanndd eeaarrlliieerr   LLiinnuuxx 22..22 aanndd llaatteerr
       ssiiggaaccttiioonn(2)            rrtt__ssiiggaaccttiioonn(2)
       ssiiggppeennddiinngg(2)           rrtt__ssiiggppeennddiinngg(2)
       ssiiggpprrooccmmaasskk(2)          rrtt__ssiiggpprrooccmmaasskk(2)
       ssiiggrreettuurrnn(2)            rrtt__ssiiggrreettuurrnn(2)
       ssiiggssuussppeenndd(2)           rrtt__ssiiggssuussppeenndd(2)
       ssiiggttiimmeeddwwaaiitt(2)         rrtt__ssiiggttiimmeeddwwaaiitt(2)

   IInntteerrrruuppttiioonn ooff ssyysstteemm ccaallllss aanndd lliibbrraarryy ffuunnccttiioonnss bbyy ssiiggnnaall hhaannddlleerrss
       If a signal handler is invoked while a system call or library  function
       call is blocked, then either:

       * the call is automatically restarted after the signal handler returns;
         or

       * the call fails with the error EEIINNTTRR.

       Which of these two  behaviors  occurs  depends  on  the  interface  and
       whether  or not the signal handler was established using the SSAA__RREESSTTAARRTT
       flag (see ssiiggaaccttiioonn(2)).  The details vary across UNIX systems;  below,
       the details for Linux.

       If  a blocked call to one of the following interfaces is interrupted by
       a signal handler, then the call is automatically  restarted  after  the
       signal  handler  returns if the SSAA__RREESSTTAARRTT flag was used; otherwise the
       call fails with the error EEIINNTTRR:

       * rreeaadd(2), rreeaaddvv(2), wwrriittee(2), wwrriitteevv(2), and iiooccttll(2) calls on  "slow"
         devices.   A "slow" device is one where the I/O call may block for an
         indefinite time, for example, a terminal, pipe, or socket.  If an I/O
         call  on  a slow device has already transferred some data by the time
         it is interrupted by a signal handler, then the call  will  return  a
         success  status  (normally,  the  number of bytes transferred).  Note
         that a (local) disk is not a slow device according  to  this  defini‐
         tion; I/O operations on disk devices are not interrupted by signals.

       * ooppeenn(2), if it can block (e.g., when opening a FIFO; see ffiiffoo(7)).

       * wwaaiitt(2), wwaaiitt33(2), wwaaiitt44(2), wwaaiittiidd(2), and wwaaiittppiidd(2).

       * Socket   interfaces:  aacccceepptt(2),  ccoonnnneecctt(2),  rreeccvv(2),  rreeccvvffrroomm(2),
         rreeccvvmmmmssgg(2), rreeccvvmmssgg(2), sseenndd(2), sseennddttoo(2), and sseennddmmssgg(2), unless a
         timeout has been set on the socket (see below).

       * File  locking  interfaces: fflloocckk(2) and the FF__SSEETTLLKKWW and FF__OOFFDD__SSEETTLLKKWW
         operations of ffccnnttll(2)

       * POSIX message queue  interfaces:  mmqq__rreecceeiivvee(3),  mmqq__ttiimmeeddrreecceeiivvee(3),
         mmqq__sseenndd(3), and mmqq__ttiimmeeddsseenndd(3).

       * ffuutteexx(2)  FFUUTTEEXX__WWAAIITT  (since  Linux 2.6.22; beforehand, always failed
         with EEIINNTTRR).

       * ggeettrraannddoomm(2).

       * pptthhrreeaadd__mmuutteexx__lloocckk(3), pptthhrreeaadd__ccoonndd__wwaaiitt(3), and related APIs.

       * ffuutteexx(2) FFUUTTEEXX__WWAAIITT__BBIITTSSEETT.

       * POSIX semaphore interfaces: sseemm__wwaaiitt(3) and  sseemm__ttiimmeeddwwaaiitt(3)  (since
         Linux 2.6.22; beforehand, always failed with EEIINNTTRR).

       * rreeaadd(2)  from an iinnoottiiffyy(7) file descriptor (since Linux 3.8; before‐
         hand, always failed with EEIINNTTRR).

       The following interfaces are never restarted after being interrupted by
       a signal handler, regardless of the use of SSAA__RREESSTTAARRTT; they always fail
       with the error EEIINNTTRR when interrupted by a signal handler:

       * "Input" socket interfaces, when a timeout (SSOO__RRCCVVTTIIMMEEOO) has been  set
         on  the  socket using sseettssoocckkoopptt(2): aacccceepptt(2), rreeccvv(2), rreeccvvffrroomm(2),
         rreeccvvmmmmssgg(2) (also with a non-NULL _t_i_m_e_o_u_t argument), and rreeccvvmmssgg(2).

       * "Output" socket interfaces, when a timeout (SSOO__RRCCVVTTIIMMEEOO) has been set
         on  the  socket  using sseettssoocckkoopptt(2): ccoonnnneecctt(2), sseenndd(2), sseennddttoo(2),
         and sseennddmmssgg(2).

       * Interfaces used to wait for signals:  ppaauussee(2),  ssiiggssuussppeenndd(2),  ssiigg‐‐
         ttiimmeeddwwaaiitt(2), and ssiiggwwaaiittiinnffoo(2).

       * File     descriptor     multiplexing    interfaces:    eeppoollll__wwaaiitt(2),
         eeppoollll__ppwwaaiitt(2), ppoollll(2), ppppoollll(2), sseelleecctt(2), and ppsseelleecctt(2).

       * System V IPC interfaces: mmssggrrccvv(2), mmssggssnndd(2), sseemmoopp(2), and sseemmttiimmee‐‐
         ddoopp(2).

       * Sleep interfaces: cclloocckk__nnaannoosslleeeepp(2), nnaannoosslleeeepp(2), and uusslleeeepp(3).

       * iioo__ggeetteevveennttss(2).

       The  sslleeeepp(3) function is also never restarted if interrupted by a han‐
       dler, but gives a success return: the number of  seconds  remaining  to
       sleep.

   IInntteerrrruuppttiioonn ooff ssyysstteemm ccaallllss aanndd lliibbrraarryy ffuunnccttiioonnss bbyy ssttoopp ssiiggnnaallss
       On  Linux, even in the absence of signal handlers, certain blocking in‐
       terfaces can fail with the error EEIINNTTRR after the process is stopped  by
       one of the stop signals and then resumed via SSIIGGCCOONNTT.  This behavior is
       not sanctioned by POSIX.1, and doesn't occur on other systems.

       The Linux interfaces that display this behavior are:

       * "Input" socket interfaces, when a timeout (SSOO__RRCCVVTTIIMMEEOO) has been  set
         on  the  socket using sseettssoocckkoopptt(2): aacccceepptt(2), rreeccvv(2), rreeccvvffrroomm(2),
         rreeccvvmmmmssgg(2) (also with a non-NULL _t_i_m_e_o_u_t argument), and rreeccvvmmssgg(2).

       * "Output" socket interfaces, when a timeout (SSOO__RRCCVVTTIIMMEEOO) has been set
         on  the  socket  using sseettssoocckkoopptt(2): ccoonnnneecctt(2), sseenndd(2), sseennddttoo(2),
         and sseennddmmssgg(2), if a send timeout (SSOO__SSNNDDTTIIMMEEOO) has been set.

       * eeppoollll__wwaaiitt(2), eeppoollll__ppwwaaiitt(2).

       * sseemmoopp(2), sseemmttiimmeeddoopp(2).

       * ssiiggttiimmeeddwwaaiitt(2), ssiiggwwaaiittiinnffoo(2).

       * Linux 3.7 and earlier: rreeaadd(2) from an iinnoottiiffyy(7) file descriptor

       * Linux 2.6.21  and  earlier:  ffuutteexx(2)  FFUUTTEEXX__WWAAIITT,  sseemm__ttiimmeeddwwaaiitt(3),
         sseemm__wwaaiitt(3).

       * Linux 2.6.8 and earlier: mmssggrrccvv(2), mmssggssnndd(2).

       * Linux 2.4 and earlier: nnaannoosslleeeepp(2).

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1, except as noted.

NNOOTTEESS
       For a discussion of async-signal-safe functions, see ssiiggnnaall--ssaaffeettyy(7).

       The  _/_p_r_o_c_/_[_p_i_d_]_/_t_a_s_k_/_[_t_i_d_]_/_s_t_a_t_u_s  file  contains  various fields that
       show the signals that a thread is blocking (_S_i_g_B_l_k), catching (_S_i_g_C_g_t),
       or  ignoring  (_S_i_g_I_g_n).  (The set of signals that are caught or ignored
       will be the same across all threads in a process.)  Other  fields  show
       the  set of pending signals that are directed to the thread (_S_i_g_P_n_d) as
       well as the set of pending signals that are directed to the process  as
       a  whole (_S_h_d_P_n_d).  The corresponding fields in _/_p_r_o_c_/_[_p_i_d_]_/_s_t_a_t_u_s show
       the information for the main thread.  See pprroocc(5) for further details.

BBUUGGSS
       There are six signals that can be delivered as a consequence of a hard‐
       ware  exception:  SSIIGGBBUUSS, SSIIGGEEMMTT, SSIIGGFFPPEE, SSIIGGIILLLL, SSIIGGSSEEGGVV, and SSIIGGTTRRAAPP.
       Which of these signals is delivered, for any given hardware  exception,
       is not documented and does not always make sense.

       For  example,  an invalid memory access that causes delivery of SSIIGGSSEEGGVV
       on one CPU architecture may cause delivery of SSIIGGBBUUSS on another  archi‐
       tecture, or vice versa.

       For another example, using the x86 _i_n_t instruction with a forbidden ar‐
       gument (any number other than 3 or 128)  causes  delivery  of  SSIIGGSSEEGGVV,
       even  though  SSIIGGIILLLL  would make more sense, because of how the CPU re‐
       ports the forbidden operation to the kernel.

SSEEEE AALLSSOO
       kkiillll(1),   cclloonnee(2),   ggeettrrlliimmiitt(2),   kkiillll(2),   ppiiddffdd__sseenndd__ssiiggnnaall(2),
       rreessttaarrtt__ssyyssccaallll(2),   rrtt__ssiiggqquueeuueeiinnffoo(2),  sseettiittiimmeerr(2),  sseettrrlliimmiitt(2),
       ssggeettmmaasskk(2), ssiiggaaccttiioonn(2), ssiiggaallttssttaacckk(2), ssiiggnnaall(2), ssiiggnnaallffdd(2), ssiigg‐‐
       ppeennddiinngg(2),   ssiiggpprrooccmmaasskk(2),   ssiiggrreettuurrnn(2),  ssiiggssuussppeenndd(2),  ssiiggwwaaiitt‐‐
       iinnffoo(2),    aabboorrtt(3),     bbssdd__ssiiggnnaall(3),     kkiillllppgg(3),     lloonnggjjmmpp(3),
       pptthhrreeaadd__ssiiggqquueeuuee(3),  rraaiissee(3),  ssiiggqquueeuuee(3),  ssiiggsseett(3), ssiiggsseettooppss(3),
       ssiiggvveecc(3), ssiiggwwaaiitt(3),  ssttrrssiiggnnaall(3),  sswwaappccoonntteexxtt(3),  ssyyssvv__ssiiggnnaall(3),
       ccoorree(5), pprroocc(5), nnppttll(7), pptthhrreeaaddss(7), ssiiggeevveenntt(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 5.10 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

Linux                             2020-12-21                         SIGNAL(7)
